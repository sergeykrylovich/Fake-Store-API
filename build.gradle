plugins {
    id 'java'
    id 'io.freefair.lombok' version('8.2.2')
    id 'io.qameta.allure' version('2.11.2')
}

group = 'com.platzi.fakeapi'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

def junitVersion = "5.9.2",
    slf4jVersion = "1.7.32",
    allureVersion = "2.19.0",
    restAssuredVersion = "5.3.0",
    jacksonVersion = "2.15.2",
    assertJVersion = "3.23.1",
    fakerVersion = "2.0.2",
    aspectJVersion = "1.9.20.1",
    schemaValidator = "5.3.2",
    allureAssertJVersion = "2.25.0",
    ownerVersion = "1.0.12",
    commonsVersion = "2.13.0"


dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
    testImplementation "io.qameta.allure:allure-rest-assured:$allureVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "net.datafaker:datafaker:$fakerVersion"
    testImplementation "org.aspectj:aspectjweaver:$aspectJVersion"
    testImplementation "io.rest-assured:json-schema-validator:$schemaValidator"
    testImplementation "io.qameta.allure:allure-assertj:$allureAssertJVersion"
    testImplementation "org.aeonbits.owner:owner-java8:$ownerVersion"
    testImplementation "commons-io:commons-io:$commonsVersion"
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "skipped", "failed", "standard_error", "standard_out"
        exceptionFormat "full"
    }
}

tasks.register("userTest", Test.class) {

    String runTags = System.getProperty("userTags")
    if (runTags != null) {
        useJUnitPlatform {
            for (String runByTag : runTags.split(",")) {
                includeTags.add(runByTag)
            }
        }
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "full"

        }
    }
}
